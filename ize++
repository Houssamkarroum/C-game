[1mdiff --git a/APPLICATION1/Console.cpp b/APPLICATION1/Console.cpp[m
[1mindex 754730c..f0a4de0 100644[m
[1m--- a/APPLICATION1/Console.cpp[m
[1m+++ b/APPLICATION1/Console.cpp[m
[36m@@ -107,7 +107,7 @@[m [mvoid Console::console_game() {[m
 [m
 [m
         // Check for duplicates and remove them[m
[31m-        shapeList.removeNodesWithSameColorOrType(currentScore);[m
[32m+[m[32m        shapeList.removeNodesWithSameColorOrType();[m
 [m
         console.affichelist(shapeList);[m
 [m
[1mdiff --git a/APPLICATION1/Console.h b/APPLICATION1/Console.h[m
[1mindex effa354..bdfc4b1 100644[m
[1m--- a/APPLICATION1/Console.h[m
[1m+++ b/APPLICATION1/Console.h[m
[36m@@ -6,7 +6,7 @@[m
 class Console[m
 {[m
 private:[m
[31m-    [m
[32m+[m
     int lastScore;[m
     int topScore;[m
 [m
[36m@@ -17,22 +17,21 @@[m [mpublic:[m
     void setTopScore(int score);[m
     void updateScores(); // Method to update the score[m
     void readScoresFromFile(const std::string& filename);[m
[31m-    void writeScoresToFile(const std::string& filename); [m
[31m-    void createScoresFile(const std::string& filename); [m
[32m+[m[32m    void writeScoresToFile(const std::string& filename);[m
[32m+[m[32m    void createScoresFile(const std::string& filename);[m
     void exitYN(void);[m
     void pauseALL(void);[m
     void welcomeToTetriseGame();[m
[31m-    [m
[32m+[m
     void gameOverScreen();[m
     void youWinScreen();[m
     void setColor(int color);[m
     void AfficheC(void);[m
     void afficheScore(ShapeList);[m
[31m-    void afficheshapes(Shape , Shape);[m
[32m+[m[32m    void afficheshapes(Shape, Shape);[m
     void affichelist(ShapeList);[m
     void afficheTimer();[m
     void welcomeAnimation();[m
     void gotoxy(int x, int y);[m
 };[m
 [m
[31m-[m
[1mdiff --git a/APPLICATION1/SFMLGraphics.cpp b/APPLICATION1/SFMLGraphics.cpp[m
[1mindex 565c74e..556cb20 100644[m
[1m--- a/APPLICATION1/SFMLGraphics.cpp[m
[1m+++ b/APPLICATION1/SFMLGraphics.cpp[m
[36m@@ -7,44 +7,30 @@[m [musing namespace std;[m
 [m
 enum MenuResult { consoleGame, graphicGame, Exit};[m
 [m
[31m-void SFMLGraphics::displayScore(sf::Text& text, sf::RectangleShape& background, sf::Font& font, int currentScore,int topScore) {[m
[31m-    // Create a rectangle shape to act as the background[m
[31m-    background.setSize(sf::Vector2f(200, 100)); // Increased height to accommodate two lines of text[m
[31m-    background.setFillColor(sf::Color(100, 100, 200)); // Gray color for the background[m
[31m-    background.setPosition(10, 10); // Position at the top left corner[m
[31m-[m
[32m+[m[32mvoid SFMLGraphics::displayScore(sf::Text& text, sf::Font& font, int currentScore, int topScore) {[m
     // Set up the text object[m
     text.setFont(font); // Set the font[m
     // Concatenate strings to display score and top score[m
     text.setString("Score: " + std::to_string(currentScore) + "\nTop Score: " + std::to_string(topScore));[m
     text.setCharacterSize(20); // Set the character size[m
     text.setFillColor(sf::Color::White); // Set the fill color[m
[31m-[m
[31m-    // Center the text inside the rectangle[m
[31m-    sf::FloatRect textBounds = text.getLocalBounds();[m
[31m-    text.setOrigin(textBounds.left + textBounds.width / 2.0f, textBounds.top + textBounds.height / 2.0f);[m
[31m-    text.setPosition(background.getPosition().x + background.getSize().x / 2.0f,[m
[31m-        background.getPosition().y + background.getSize().y / 2.0f);[m
[32m+[m[32m    // Set default position[m
[32m+[m[32m    sf::Vector2f defaultPosition(80, 70); // Example position, change as needed[m
[32m+[m[32m    // Set the position of the text[m
[32m+[m[32m    text.setPosition(defaultPosition);[m
 }[m
 [m
[31m-void SFMLGraphics::displayTime(sf::Text& text, sf::RectangleShape& background, sf::Font& font, int time) {[m
[31m-	// Create a rectangle shape to act as the background[m
[31m-	background.setSize(sf::Vector2f(200, 100)); // Increased height to accommodate two lines of text[m
[31m-	background.setFillColor(sf::Color(100, 100, 200)); // Gray color for the background[m
[31m-	background.setPosition(790, 10); // Position at the top left corner[m
[31m-[m
[32m+[m[32mvoid SFMLGraphics::displayTime(sf::Text& text, sf::Font& font, int time) {[m
 	// Set up the text object[m
 	text.setFont(font); // Set the font[m
 	// Concatenate strings to display score and top score[m
 	text.setString("Time left: " + std::to_string(time));[m
 	text.setCharacterSize(20); // Set the character size[m
 	text.setFillColor(sf::Color::White); // Set the fill color[m
[31m-[m
[31m-	// Center the text inside the rectangle[m
[31m-	sf::FloatRect textBounds = text.getLocalBounds();[m
[31m-	text.setOrigin(textBounds.left + textBounds.width / 2.0f, textBounds.top + textBounds.height / 2.0f);[m
[31m-	text.setPosition(background.getPosition().x + background.getSize().x / 2.0f,[m
[31m-		background.getPosition().y + background.getSize().y / 2.0f);[m
[32m+[m[32m    // Set default position[m
[32m+[m[32m    sf::Vector2f defaultPosition(750, 70); // Example position, change as needed[m
[32m+[m[32m    // Set the position of the text[m
[32m+[m[32m    text.setPosition(defaultPosition);[m
 }[m
 [m
 void SFMLGraphics::displayArrows(sf::RenderWindow& window) {[m
[36m@@ -77,44 +63,30 @@[m [mvoid SFMLGraphics::displayArrows(sf::RenderWindow& window) {[m
     window.draw(leftArrow);[m
 }[m
 [m
[31m-void SFMLGraphics::displayCurrentShape(sf::Text& text, sf::RectangleShape& background, sf::Font& font) {[m
[31m-    // Create a rectangle shape to act as the background[m
[31m-    background.setSize(sf::Vector2f(200, 100)); // Increased height to accommodate two lines of text[m
[31m-    background.setFillColor(sf::Color(100, 100, 200)); // Gray color for the background[m
[31m-    background.setPosition(10, 170); // Position at the top left corner[m
[31m-[m
[32m+[m[32mvoid SFMLGraphics::displayCurrentShape(sf::Text& text, sf::Font& font) {[m
     // Set up the text object[m
     text.setFont(font); // Set the font[m
     // Concatenate strings to display score and top score[m
     text.setString("Current Shape: " );[m
     text.setCharacterSize(20); // Set the character size[m
     text.setFillColor(sf::Color::White); // Set the fill color[m
[31m-[m
[31m-    // Center the text inside the rectangle[m
[31m-    sf::FloatRect textBounds = text.getLocalBounds();[m
[31m-    text.setOrigin(textBounds.left + textBounds.width / 2.0f, textBounds.top + textBounds.height / 2.0f);[m
[31m-    text.setPosition(background.getPosition().x + background.getSize().x / 2.0f,[m
[31m-        background.getPosition().y + background.getSize().y / 2.0f);[m
[32m+[m[32m    // Set default position[m
[32m+[m[32m    sf::Vector2f defaultPosition(50, 210); // Example position, change as needed[m
[32m+[m[32m    // Set the position of the text[m
[32m+[m[32m    text.setPosition(defaultPosition);[m
 }[m
 [m
[31m-void SFMLGraphics::displayNextShape(sf::Text& text, sf::RectangleShape& background, sf::Font& font) {[m
[31m-    // Create a rectangle shape to act as the background[m
[31m-    background.setSize(sf::Vector2f(200, 100)); // Increased height to accommodate two lines of text[m
[31m-    background.setFillColor(sf::Color(100, 100, 200)); // Gray color for the background[m
[31m-    background.setPosition(650, 170); // Position at the top left corner[m
[31m-[m
[32m+[m[32mvoid SFMLGraphics::displayNextShape(sf::Text& text, sf::Font& font) {[m
     // Set up the text object[m
     text.setFont(font); // Set the font[m
     // Concatenate strings to display score and top score[m
     text.setString("Next Shape: ");[m
     text.setCharacterSize(20); // Set the character size[m
     text.setFillColor(sf::Color::White); // Set the fill color[m
[31m-[m
[31m-    // Center the text inside the rectangle[m
[31m-    sf::FloatRect textBounds = text.getLocalBounds();[m
[31m-    text.setOrigin(textBounds.left + textBounds.width / 2.0f, textBounds.top + textBounds.height / 2.0f);[m
[31m-    text.setPosition(background.getPosition().x + background.getSize().x / 2.0f,[m
[31m-        background.getPosition().y + background.getSize().y / 2.0f);[m
[32m+[m[32m    // Set default position[m
[32m+[m[32m    sf::Vector2f defaultPosition(740, 210); // Example position, change as needed[m
[32m+[m[32m    // Set the position of the text[m
[32m+[m[32m    text.setPosition(defaultPosition);[m
 }[m
 [m
 sf::Color SFMLGraphics::getColorFromIndex(int colorIndex) {[m
[36m@@ -173,7 +145,7 @@[m [msf::Drawable* SFMLGraphics::createSFMLShape(const Shape& shape) {[m
 }[m
 [m
 void SFMLGraphics::displayShapeList(sf::RenderWindow& window) {[m
[31m-    sf::Vector2f position(10, 450); // Starting position to draw shapes[m
[32m+[m[32m    sf::Vector2f position(50, 450); // Starting position to draw shapes[m
     const float shapeSpacing = 10.0f; // Spacing between shapes[m
 [m
     // Iterate over the shape list[m
[36m@@ -207,16 +179,58 @@[m [mvoid SFMLGraphics::displayShapeList(sf::RenderWindow& window) {[m
     }[m
 }[m
 [m
[32m+[m[32mvoid SFMLGraphics::gameOver(sf::Text& gameOverText, sf::Font& font, sf::RenderWindow& window) {[m
[32m+[m[32m    gameOverText.setFont(font);[m
[32m+[m[32m    gameOverText.setString("Game Over!");[m
[32m+[m[32m    gameOverText.setCharacterSize(48);[m
[32m+[m[32m    gameOverText.setFillColor(sf::Color::Red);[m
[32m+[m[32m    gameOverText.setPosition(360, 250);[m
[32m+[m	[32mwindow.draw(gameOverText);[m
[32m+[m[32m    window.display();[m
[32m+[m	[32msf::sleep(sf::seconds(2));[m
[32m+[m[32m    exit(0);[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mvoid SFMLGraphics::gamePaused(sf::Text& gamePausedText, sf::Font& font, sf::RenderWindow& window) {[m
[32m+[m	[32mgamePausedText.setFont(font);[m
[32m+[m	[32mgamePausedText.setString("Game Paused!");[m
[32m+[m	[32mgamePausedText.setCharacterSize(40);[m
[32m+[m	[32mgamePausedText.setFillColor(sf::Color::White);[m
[32m+[m	[32mgamePausedText.setPosition(360, 250);[m
[32m+[m	[32mwindow.draw(gamePausedText);[m
[32m+[m[32m}[m
[32m+[m
 void SFMLGraphics::display() {[m
     // Create window[m
[31m-    sf::RenderWindow window(sf::VideoMode(1000, 600), "Tetris");[m
[32m+[m[32m    sf::RenderWindow window(sf::VideoMode(1300, 600), "Tetris");[m
[32m+[m
[32m+[m[32m    // Load the background image[m
[32m+[m[32m    sf::Texture backgroundTexture;[m
[32m+[m[32m    if (!backgroundTexture.loadFromFile("D:/ENSET/S2/Projet/bg1.png")) {[m
[32m+[m[32m        std::cerr << "Failed to load background image." << std::endl;[m
[32m+[m[32m        return;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Load the rules image[m
[32m+[m[32m    sf::Texture rulesTexture;[m
[32m+[m[32m    if (!rulesTexture.loadFromFile("D:/ENSET/S2/Projet/rules.png")) {[m
[32m+[m[32m        std::cerr << "Failed to load background image." << std::endl;[m
[32m+[m[32m        return;[m
[32m+[m[32m    }[m
[32m+[m
[32m+[m[32m    // Create a sprite for the background and set its texture[m
[32m+[m[32m    sf::Sprite backgroundSprite;[m
[32m+[m[32m    backgroundSprite.setTexture(backgroundTexture);[m
[32m+[m[32m    backgroundSprite.scale(sf::Vector2f(0.735, 0.8));[m
[32m+[m
[32m+[m[32m    // Create a sprite for the rules and set its texture[m
[32m+[m[32m    sf::Sprite rulesSprite;[m
[32m+[m[32m    rulesSprite.setTexture(rulesTexture);[m
[32m+[m[32m    rulesSprite.setPosition(sf::Vector2f(1003, 80));[m
[32m+[m[32m    rulesSprite.scale(sf::Vector2f(0.5, 0.6));[m
 [m
     // Seed the random number generator[m
     std::srand(static_cast<unsigned>(std::time(nullptr)));[m
[31m-[m
[31m-    // Set initial score variables[m
[31m-    int currentScore = 0;[m
[31m-    int topScore = 0;[m
     Shape currentShape = { std::rand() % 4, std::rand() % 4 };[m
     Shape nextShape = { std::rand() % 4, std::rand() % 4 };[m
 [m
[36m@@ -228,21 +242,27 @@[m [mvoid SFMLGraphics::display() {[m
         return;[m
     }[m
 [m
[31m-    // Create a rectangle shape and text object to display the score and the time left[m
[31m-    sf::RectangleShape score_background;[m
[31m-    sf::RectangleShape time_background;[m
[31m-    sf::RectangleShape currentShapebackground;[m
[31m-    sf::RectangleShape nextShapebackground;[m
[32m+[m[32m    // Define time limit and clock[m
[32m+[m[32m    int timeLimit = 100; // Time limit in seconds[m
[32m+[m[32m    sf::Clock clock;[m
[32m+[m[32m    sf::Time totalElapsedTime;[m
[32m+[m[32m    sf::Time pauseStartTime;[m
[32m+[m
[32m+[m[32m    // Define paused state[m
[32m+[m[32m    bool paused = false;[m
 [m
[32m+[m[32m    // Define text objects[m
     sf::Text score_text;[m
     sf::Text time_text;[m
     sf::Text currentShape_text;[m
     sf::Text nextShape_text;[m
[32m+[m[32m    sf::Text gameOverText;[m
[32m+[m[32m    sf::Text gamePausedText;[m
[32m+[m[41m    [m
[32m+[m[32m    shapeList.InitLastScore();[m
 [m
[31m-    displayScore(score_text, score_background, font, currentScore, topScore);[m
[31m-    displayTime(time_text, time_background, font, 0);[m
[31m-    displayCurrentShape(currentShape_text, currentShapebackground, font);[m
[31m-    displayNextShape(nextShape_text, nextShapebackground, font);[m
[32m+[m[32m    displayCurrentShape(currentShape_text, font);[m
[32m+[m[32m    displayNextShape(nextShape_text, font);[m
 [m
     // Create drawable objects for current and next shapes[m
     sf::Drawable* currentDrawable = createSFMLShape(currentShape);[m
[36m@@ -253,14 +273,25 @@[m [mvoid SFMLGraphics::display() {[m
         // Clear the window[m
         window.clear();[m
 [m
[31m-        // Draw the background rectangle[m
[31m-        window.draw(score_background);[m
[31m-        window.draw(time_background);[m
[31m-        window.draw(currentShapebackground);[m
[31m-        window.draw(nextShapebackground);[m
[32m+[m[32m        // Draw the background image[m
[32m+[m[32m        window.draw(backgroundSprite);[m
[32m+[m[32m        // Draw the background rules[m
[32m+[m[32m        window.draw(rulesSprite);[m
[32m+[m
[32m+[m[32m        // Update and display time left[m
[32m+[m[32m        sf::Time elapsedTime = clock.restart(); // Restart the clock and get elapsed time[m
[32m+[m[32m        if (!paused) {[m
[32m+[m[32m            totalElapsedTime += elapsedTime; // Accumulate total elapsed time[m
[32m+[m[32m        }[m
[32m+[m[32m        int secondsLeft = timeLimit - totalElapsedTime.asSeconds();[m
[32m+[m[32m        displayTime(time_text, font, secondsLeft);[m
[32m+[m
[32m+[m[32m        // Check if time is up[m
[32m+[m[32m        if (secondsLeft <= 0) {[m
[32m+[m[32m            gameOver(gameOverText, font, window);[m
[32m+[m[32m        }[m
 [m
         // Draw the text[m
[31m-        window.draw(score_text);[m
         window.draw(time_text);[m
         window.draw(currentShape_text);[m
         window.draw(nextShape_text);[m
[36m@@ -276,39 +307,63 @@[m [mvoid SFMLGraphics::display() {[m
                 window.close();[m
             }[m
             else if (event.type == sf::Event::KeyPressed) {[m
[31m-                if (event.key.code == sf::Keyboard::Escape) {[m
[32m+[m[32m                if (event.key.code == sf::Keyboard::Q) {[m
                     // Close the window if Escape key is pressed[m
                     window.close();[m
                 }[m
                 else if (event.key.code == sf::Keyboard::Right) {[m
                     // Add the next shape to the end of the list[m
[31m-                    shapeList.addToEnd(currentShape);[m
[31m-                    // Update current shape[m
[31m-                    currentShape = nextShape;[m
[31m-                    // Generate new random shape for next iteration[m
[31m-                    nextShape = { std::rand() % 4, std::rand() % 4 };[m
[31m-                    // Update drawable objects for current and next shapes[m
